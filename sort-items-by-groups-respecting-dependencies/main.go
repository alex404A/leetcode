package main

import (
	"fmt"
	"sort"
)

type GroupNode struct {
	val      int
	values   []int
	inDegree int
	deps     []int
}

type NodeRelations struct {
	allNodes        map[int]*GroupNode
	zeroDegreeNodes []*GroupNode
}

func (this *NodeRelations) popZero() (node *GroupNode, ok bool) {
	if len(this.zeroDegreeNodes) == 0 {
		node = nil
		ok = false
	} else {
		node = this.zeroDegreeNodes[0]
		this.zeroDegreeNodes = this.zeroDegreeNodes[1:]
		ok = true
	}
	return
}

func (this *NodeRelations) deductDegree(values []int) {
	for _, val := range values {
		node := this.allNodes[val]
		node.inDegree--
		if node.inDegree == 0 {
			this.zeroDegreeNodes = append(this.zeroDegreeNodes, node)
		}
	}
}

func (this *NodeRelations) findSolution() (result []int, hasSolution bool) {
	result = []int{}
	node, ok := this.popZero()
	cnt := 0
	for ok {
		result = append(result, node.values...)
		this.deductDegree(node.deps)
		cnt++
		node, ok = this.popZero()
	}
	hasSolution = cnt == len(this.allNodes)
	if !hasSolution {
		result = []int{}
	}
	return
}

func Construct(nodes map[int]*GroupNode) NodeRelations {
	allNodes := nodes
	zeroDegreeNodes := []*GroupNode{}
	for _, node := range nodes {
		allNodes[node.val] = node
		if node.inDegree == 0 {
			zeroDegreeNodes = append(zeroDegreeNodes, node)
		}
	}
	return NodeRelations{allNodes, zeroDegreeNodes}
}

func sortItems(n int, m int, group []int, beforeItems [][]int) []int {
	groupNodes, hasSolution := solveInGroups(m, group, beforeItems)
	if !hasSolution {
		return []int{}
	}
	result, hasSolution := solveBetweenGroups(groupNodes, group, beforeItems)
	if hasSolution {
		return result
	} else {
		return []int{}
	}
}

func solveBetweenGroups(groupNodes []*GroupNode, itemGroup []int, beforeItems [][]int) (result []int, hasSolution bool) {
	groupNodeMap := supplementGroupNodes(groupNodes, itemGroup)
	for i, items := range beforeItems {
		iGroup := itemGroup[i]
		iKey := i
		if iGroup != -1 {
			iKey = calGroupIndex(iGroup)
		}
		for _, j := range items {
			jGroup := itemGroup[j]
			jKey := j
			if jGroup != -1 {
				jKey = calGroupIndex(jGroup)
			}
			if iGroup != -1 && iKey == jKey {
				continue
			}
			_, ok := Find(groupNodeMap[jKey].deps, iKey)
			if !ok {
				groupNodeMap[jKey].deps = append(groupNodeMap[jKey].deps, iKey)
				groupNodeMap[iKey].inDegree++
			}
		}
	}
	relations := Construct(groupNodeMap)
	result, hasSolution = relations.findSolution()
	return
}

func supplementGroupNodes(groupNodes []*GroupNode, itemGroup []int) map[int]*GroupNode {
	m := make(map[int]*GroupNode)
	for _, groupNode := range groupNodes {
		m[groupNode.val] = groupNode
	}
	for i, group := range itemGroup {
		if group == -1 {
			groupNode := &GroupNode{i, []int{i}, 0, []int{}}
			m[i] = groupNode
		}
	}
	return m
}

func solveInGroups(m int, itemGroup []int, beforeItems [][]int) (groupNodes []*GroupNode, hasSolution bool) {
	groups := initSlice(m)
	for i, group := range itemGroup {
		if group != -1 {
			groups[group] = append(groups[group], i)
		}
	}
	groupNodes = []*GroupNode{}
	hasSolution = false
	for i, group := range groups {
		if len(group) != 0 {
			groupNode, ok := solveInGroup(i, group, itemGroup, beforeItems)
			if i == 208 {
				fmt.Println(group)
				fmt.Println(groupNode)
			}
			if !ok {
				return
			} else {
				groupNodes = append(groupNodes, groupNode)
			}
		}
	}
	hasSolution = true
	return
}

func solveInGroup(groupIndex int, sameGroup []int, group []int, beforeItems [][]int) (groupNode *GroupNode, hasSolution bool) {
	nodeMap := make(map[int]*GroupNode)
	for _, val := range sameGroup {
		nodeMap[val] = &GroupNode{val, []int{val}, 0, []int{}}
	}
	for _, val := range sameGroup {
		items := beforeItems[val]
		for _, item := range items {
			if group[item] == groupIndex {
				nodeMap[val].inDegree++
				nodeMap[item].deps = append(nodeMap[item].deps, val)
			}
		}
	}
	relations := Construct(nodeMap)
	result, hasSolution := relations.findSolution()
	if hasSolution {
		groupNode = &GroupNode{calGroupIndex(groupIndex), result, 0, []int{}}
	}
	return
}

func calGroupIndex(groupIndex int) int {
	if groupIndex == 0 {
		return -999999
	} else {
		return 0 - groupIndex
	}
}

func initSlice(size int) [][]int {
	slices := make([][]int, size)
	for i := 0; i < size; i++ {
		slices[i] = []int{}
	}
	return slices
}

func Find(slice []int, val int) (int, bool) {
	for i, item := range slice {
		if item == val {
			return i, true
		}
	}
	return -1, false
}

func main() {
	n := 1000
	m := 503
	itemGroups := []int{43, 464, 252, 206, 186, 382, 80, 194, 487, 344, 401, 12, 33, 165, 117, 105, 384, 221, 498, 412, 99, 283, 40, 42, 362, 355, 330, 350, 349, 501, 340, 99, 76, 340, 385, 101, 355, 273, 357, 332, 58, 11, 287, 170, 142, 344, 63, 414, 423, 465, 465, 369, 246, 500, 269, 139, 193, 439, 282, 120, 6, 458, 366, 87, 489, 426, 338, 219, 35, 320, 31, 309, 87, 316, 152, 113, 309, 358, 347, 366, 478, 377, 213, 94, 228, 252, 140, 502, 237, 197, 396, 138, 100, 168, 26, 137, 49, 312, 28, 418, 389, 294, 21, 236, 294, 411, 172, 324, 279, 38, 402, 393, 328, 352, 109, 133, 371, 482, 119, 222, 466, 154, 98, 273, 189, 411, 271, 51, 143, 422, 66, 271, 435, 227, 132, 151, 403, 110, 93, 367, 296, 240, 348, 110, 14, 79, 477, 326, 328, 418, 424, 290, 173, 418, 387, 278, 98, 147, 133, 75, 242, 464, 451, 8, 82, 364, 75, 215, 427, 388, 37, 206, 477, 488, 76, 497, 489, 290, 61, 278, 343, 254, 175, 113, 144, 120, 391, 117, 357, 233, 277, 483, 407, 87, 389, 379, 184, 406, 136, 134, 436, 94, 333, 481, 24, 430, -1, 169, 417, 210, 192, 366, 134, 67, 461, 94, 267, 390, 269, 448, 184, 138, 435, 79, 92, 378, 267, 320, 154, 307, 81, 373, 319, 89, 194, 361, 364, 303, 161, 481, 253, 16, 108, 98, 280, 274, 7, 208, 465, 187, 56, 278, 104, 341, 102, 264, 292, 81, 497, 67, 476, 9, 378, 412, 480, 57, 33, 31, 324, 283, 230, 40, 70, 362, 463, 84, 173, 72, 231, 37, 434, 344, 339, 169, 126, 18, 49, 265, 463, 137, 489, 493, 347, 143, 416, 427, 406, 306, 144, 430, 470, 224, 349, 23, 385, 163, 3, 273, 166, 392, 482, 437, 7, 308, 183, 241, 335, 1, 107, 40, 321, 235, 292, 323, 223, 365, 63, 33, 99, 38, 133, 244, 282, 309, 0, 254, 140, 305, 21, 16, 379, 338, 364, 1, 241, 239, 43, 361, 25, 294, 136, 181, 38, 55, 81, 476, 268, 458, 39, 282, 118, 236, 191, 133, 337, 355, 202, 250, 461, 76, 265, 40, 308, 315, 462, 437, 262, 371, 414, 105, 176, 350, 343, 221, 421, 44, 99, 414, 459, 205, 302, 132, 476, 432, 66, 407, 147, 65, 232, 125, 306, 357, 387, 141, 416, 396, 360, 482, 376, 428, 119, 218, 224, 10, 486, 125, 479, 359, 218, 184, 50, 164, 70, 248, 23, 224, 401, 411, 322, 147, 417, 61, 387, 322, 320, 220, 182, 411, 11, 482, 479, 396, 222, 62, 256, 99, 469, 453, 296, 351, 236, 421, 26, 213, 455, 389, 454, 463, 423, 79, 478, 63, 332, 121, 288, 423, 464, 401, 484, 37, 85, 183, 397, 385, 211, 353, 169, 303, 269, 403, 25, 192, 320, 417, 470, 156, 309, 422, 309, 334, 466, 216, 218, 6, 300, 228, 37, 163, 156, 384, 123, 470, 381, 32, 392, 97, 360, 37, 274, 406, 301, 435, 293, 445, 60, 424, 9, 219, 243, 151, 305, 23, 422, 414, 275, 394, 282, 189, 459, 17, 407, 190, 381, 371, 354, 171, 165, 302, 408, 97, 106, 395, 95, 37, 322, 22, 478, 392, 392, 106, 153, 273, 108, 108, 259, 208, 324, 351, 197, 427, 189, 296, 468, 118, 48, 351, 236, 470, 417, 3, 319, 204, 465, 329, 427, 337, 261, 329, 51, 334, 487, 206, 16, 326, 305, 212, 484, 50, 172, 11, 426, 73, 44, 157, 447, 46, 292, 457, 163, 8, 250, 105, 109, 421, 177, 242, 200, 473, 114, 141, 143, 213, 350, 17, 205, 256, 216, 317, 230, 390, 390, 417, 475, 33, 227, 502, 88, 382, 482, 19, 6, 424, 417, 362, 495, 464, 249, 182, 84, 269, 414, 411, 318, 188, 357, 12, 250, 290, 449, 11, 399, 449, 255, 363, 180, 426, 45, 162, 128, 199, 266, 363, 37, 449, 240, 276, 9, 219, 480, 12, 216, 259, 174, 169, 371, 324, 474, 308, 445, 336, 373, 422, 493, 305, 108, 157, 356, 136, 163, 198, 388, 261, 288, 401, 465, 267, 465, 120, 288, 9, 144, 297, 73, 12, 174, 306, 166, 463, 43, 485, 104, 94, 492, 253, 446, 477, 254, 352, 421, 180, 448, 385, 152, 364, 408, 300, 12, 43, 268, 179, 482, 155, 12, 363, 41, 321, 420, 304, 237, 84, 495, 483, 118, 401, 260, 120, 480, 3, 453, 431, 370, 231, 408, 79, -1, 401, 394, 455, 7, 292, 332, 467, 266, 361, 393, 94, 433, 174, 489, 353, 331, 74, 259, 342, 346, 168, 21, 15, 56, 7, 412, 440, 497, 179, 49, 307, 272, 46, 163, 177, 52, 342, 495, 377, 42, 249, 278, 218, 111, 376, 184, 373, 219, 163, 302, 228, 486, 433, 231, 472, 473, 499, 167, 73, 462, 289, 336, 299, 259, 210, 32, 136, 127, 413, 412, 95, 478, 142, 190, 250, 323, 433, 135, 378, 494, 425, 426, 113, 205, 487, 103, 226, 181, 449, 83, 309, 74, 191, 278, 97, 114, 232, 154, 222, 424, 352, 428, 443, 196, 502, 430, 442, 200, 297, 26, 399, 146, 223, 248, 171, -1, 197, 269, 191, 204, 297, 142, 479, 453, 419, 348, 234, 320, 19, 266, 21, 367, 252, 41, 254, 155, 501, 394, 304, 25, 41, 117, 152, 347, 428, 6, 353, 87, 409, 229, 249, 132, 362, 290, 361, 343, 284, 397, 240, 209, 115, 251, 397, 162, 31, 56, 181, 2, 373, 442, 77, 9, 476, 258, 243, 496, 387, 393, 98, 442, 375, 254, 3, 263, 59, 423, 19, 467, 174, 386, 212, 390, 209, 29, 159, 329, 163, 150, 4, 425, 265, 502, 181, 192, 40, 102, 39, 56, 263, 71, 273, 154, 88, 325, 456, 70, 130, 254, 157, 223, 368, 122, 240, 354, 492, 369, 80, 323, 432, 458, 496, 63, 161, 215, 444, 231, 391, 309, 1, 219, 334, 155, 10, 110, 165}
	beforeItems := [][]int{
		[]int{94, 267, 655, 720, 445, 102, 367, 243, 599, 699},
		[]int{814, 9, 290, 469, 743, 706, 61, 876, 614, 948, 979, 409, 950, 809, 625, 934, 536, 897, 894, 727, 952, 233, 348, 466, 828},
		[]int{},
		[]int{457, 417, 380, 492, 647},
		[]int{},
		[]int{649, 100, 286, 803},
		[]int{},
		[]int{752}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{},
	}
	result := sortItems(n, m, itemGroups, beforeItems)
	fmt.Println(result)
	// n := 8
	// m := 2
	// group := []int{-1, -1, 1, 0, 0, 1, 0, -1}
	// beforeItems := [][]int{
	// 	[]int{}, []int{6}, []int{5}, []int{6}, []int{3}, []int{}, []int{4}, []int{},
	// }
	// result := sortItems(n, m, group, beforeItems)
	// fmt.Println(result)
	test()
}

func test() {
	n := 1000
	m := 503
	itemGroups := []int{43, 464, 252, 206, 186, 382, 80, 194, 487, 344, 401, 12, 33, 165, 117, 105, 384, 221, 498, 412, 99, 283, 40, 42, 362, 355, 330, 350, 349, 501, 340, 99, 76, 340, 385, 101, 355, 273, 357, 332, 58, 11, 287, 170, 142, 344, 63, 414, 423, 465, 465, 369, 246, 500, 269, 139, 193, 439, 282, 120, 6, 458, 366, 87, 489, 426, 338, 219, 35, 320, 31, 309, 87, 316, 152, 113, 309, 358, 347, 366, 478, 377, 213, 94, 228, 252, 140, 502, 237, 197, 396, 138, 100, 168, 26, 137, 49, 312, 28, 418, 389, 294, 21, 236, 294, 411, 172, 324, 279, 38, 402, 393, 328, 352, 109, 133, 371, 482, 119, 222, 466, 154, 98, 273, 189, 411, 271, 51, 143, 422, 66, 271, 435, 227, 132, 151, 403, 110, 93, 367, 296, 240, 348, 110, 14, 79, 477, 326, 328, 418, 424, 290, 173, 418, 387, 278, 98, 147, 133, 75, 242, 464, 451, 8, 82, 364, 75, 215, 427, 388, 37, 206, 477, 488, 76, 497, 489, 290, 61, 278, 343, 254, 175, 113, 144, 120, 391, 117, 357, 233, 277, 483, 407, 87, 389, 379, 184, 406, 136, 134, 436, 94, 333, 481, 24, 430, -1, 169, 417, 210, 192, 366, 134, 67, 461, 94, 267, 390, 269, 448, 184, 138, 435, 79, 92, 378, 267, 320, 154, 307, 81, 373, 319, 89, 194, 361, 364, 303, 161, 481, 253, 16, 108, 98, 280, 274, 7, 208, 465, 187, 56, 278, 104, 341, 102, 264, 292, 81, 497, 67, 476, 9, 378, 412, 480, 57, 33, 31, 324, 283, 230, 40, 70, 362, 463, 84, 173, 72, 231, 37, 434, 344, 339, 169, 126, 18, 49, 265, 463, 137, 489, 493, 347, 143, 416, 427, 406, 306, 144, 430, 470, 224, 349, 23, 385, 163, 3, 273, 166, 392, 482, 437, 7, 308, 183, 241, 335, 1, 107, 40, 321, 235, 292, 323, 223, 365, 63, 33, 99, 38, 133, 244, 282, 309, 0, 254, 140, 305, 21, 16, 379, 338, 364, 1, 241, 239, 43, 361, 25, 294, 136, 181, 38, 55, 81, 476, 268, 458, 39, 282, 118, 236, 191, 133, 337, 355, 202, 250, 461, 76, 265, 40, 308, 315, 462, 437, 262, 371, 414, 105, 176, 350, 343, 221, 421, 44, 99, 414, 459, 205, 302, 132, 476, 432, 66, 407, 147, 65, 232, 125, 306, 357, 387, 141, 416, 396, 360, 482, 376, 428, 119, 218, 224, 10, 486, 125, 479, 359, 218, 184, 50, 164, 70, 248, 23, 224, 401, 411, 322, 147, 417, 61, 387, 322, 320, 220, 182, 411, 11, 482, 479, 396, 222, 62, 256, 99, 469, 453, 296, 351, 236, 421, 26, 213, 455, 389, 454, 463, 423, 79, 478, 63, 332, 121, 288, 423, 464, 401, 484, 37, 85, 183, 397, 385, 211, 353, 169, 303, 269, 403, 25, 192, 320, 417, 470, 156, 309, 422, 309, 334, 466, 216, 218, 6, 300, 228, 37, 163, 156, 384, 123, 470, 381, 32, 392, 97, 360, 37, 274, 406, 301, 435, 293, 445, 60, 424, 9, 219, 243, 151, 305, 23, 422, 414, 275, 394, 282, 189, 459, 17, 407, 190, 381, 371, 354, 171, 165, 302, 408, 97, 106, 395, 95, 37, 322, 22, 478, 392, 392, 106, 153, 273, 108, 108, 259, 208, 324, 351, 197, 427, 189, 296, 468, 118, 48, 351, 236, 470, 417, 3, 319, 204, 465, 329, 427, 337, 261, 329, 51, 334, 487, 206, 16, 326, 305, 212, 484, 50, 172, 11, 426, 73, 44, 157, 447, 46, 292, 457, 163, 8, 250, 105, 109, 421, 177, 242, 200, 473, 114, 141, 143, 213, 350, 17, 205, 256, 216, 317, 230, 390, 390, 417, 475, 33, 227, 502, 88, 382, 482, 19, 6, 424, 417, 362, 495, 464, 249, 182, 84, 269, 414, 411, 318, 188, 357, 12, 250, 290, 449, 11, 399, 449, 255, 363, 180, 426, 45, 162, 128, 199, 266, 363, 37, 449, 240, 276, 9, 219, 480, 12, 216, 259, 174, 169, 371, 324, 474, 308, 445, 336, 373, 422, 493, 305, 108, 157, 356, 136, 163, 198, 388, 261, 288, 401, 465, 267, 465, 120, 288, 9, 144, 297, 73, 12, 174, 306, 166, 463, 43, 485, 104, 94, 492, 253, 446, 477, 254, 352, 421, 180, 448, 385, 152, 364, 408, 300, 12, 43, 268, 179, 482, 155, 12, 363, 41, 321, 420, 304, 237, 84, 495, 483, 118, 401, 260, 120, 480, 3, 453, 431, 370, 231, 408, 79, -1, 401, 394, 455, 7, 292, 332, 467, 266, 361, 393, 94, 433, 174, 489, 353, 331, 74, 259, 342, 346, 168, 21, 15, 56, 7, 412, 440, 497, 179, 49, 307, 272, 46, 163, 177, 52, 342, 495, 377, 42, 249, 278, 218, 111, 376, 184, 373, 219, 163, 302, 228, 486, 433, 231, 472, 473, 499, 167, 73, 462, 289, 336, 299, 259, 210, 32, 136, 127, 413, 412, 95, 478, 142, 190, 250, 323, 433, 135, 378, 494, 425, 426, 113, 205, 487, 103, 226, 181, 449, 83, 309, 74, 191, 278, 97, 114, 232, 154, 222, 424, 352, 428, 443, 196, 502, 430, 442, 200, 297, 26, 399, 146, 223, 248, 171, -1, 197, 269, 191, 204, 297, 142, 479, 453, 419, 348, 234, 320, 19, 266, 21, 367, 252, 41, 254, 155, 501, 394, 304, 25, 41, 117, 152, 347, 428, 6, 353, 87, 409, 229, 249, 132, 362, 290, 361, 343, 284, 397, 240, 209, 115, 251, 397, 162, 31, 56, 181, 2, 373, 442, 77, 9, 476, 258, 243, 496, 387, 393, 98, 442, 375, 254, 3, 263, 59, 423, 19, 467, 174, 386, 212, 390, 209, 29, 159, 329, 163, 150, 4, 425, 265, 502, 181, 192, 40, 102, 39, 56, 263, 71, 273, 154, 88, 325, 456, 70, 130, 254, 157, 223, 368, 122, 240, 354, 492, 369, 80, 323, 432, 458, 496, 63, 161, 215, 444, 231, 391, 309, 1, 219, 334, 155, 10, 110, 165}
	beforeItems := [][]int{
		[]int{94, 267, 655, 720, 445, 102, 367, 243, 599, 699},
		[]int{814, 9, 290, 469, 743, 706, 61, 876, 614, 948, 979, 409, 950, 809, 625, 934, 536, 897, 894, 727, 952, 233, 348, 466, 828},
		[]int{},
		[]int{457, 417, 380, 492, 647},
		[]int{},
		[]int{649, 100, 286, 803},
		[]int{},
		[]int{752}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{}, []int{},
	}
	output := []int{249, 411, 418, 492, 797, 916, 737, 893, 417, 178, 431, 904, 246, 312, 758, 779, 11, 645, 669, 703, 726, 732, 948, 118, 410, 832, 128, 293, 610, 444, 615, 265, 333, 486, 488, 845, 992, 71, 76, 139, 886, 693, 743, 755, 10, 426, 467, 879, 46, 326, 461, 986, 370, 955, 287, 126, 131, 277, 151, 177, 647, 908, 93, 775, 642, 217, 619, 620, 946, 280, 501, 567, 300, 484, 84, 495, 805, 190, 78, 292, 898, 119, 442, 853, 52, 29, 891, 396, 429, 157, 706, 308, 543, 662, 170, 279, 469, 496, 507, 753, 145, 223, 459, 472, 912, 917, 861, 924, 934, 250, 778, 920, 962, 91, 221, 181, 335, 716, 889, 936, 972, 146, 172, 715, 788, 803, 951, 305, 497, 598, 688, 309, 504, 547, 548, 736, 219, 720, 117, 310, 407, 439, 628, 730, 971, 273, 633, 907, 24, 777, 314, 471, 914, 947, 17, 383, 73, 773, 791, 449, 557, 565, 844, 184, 298, 700, 943, 672, 704, 767, 518, 929, 676, 238, 987, 380, 413, 997, 86, 336, 756, 892, 525, 393, 983, 939, 687, 821, 198, 350, 167, 988, 398, 851, 390, 537, 804, 888, 895, 734, 414, 806, 237, 477, 96, 286, 784, 114, 602, 408, 799, 634, 740, 792, 144, 338, 776, 885, 102, 206, 502, 532, 457, 707, 274, 288, 253, 953, 163, 599, 147, 583, 475, 769, 901, 208, 430, 483, 568, 621, 632, 61, 357, 984, 809, 204, 54, 218, 478, 639, 872, 494, 725, 801, 923, 231, 680, 623, 12, 266, 327, 159, 166, 199, 212, 858, 564, 351, 842, 921, 957, 189, 928, 68, 399, 415, 320, 735, 989, 591, 702, 813, 348, 480, 894, 233, 321, 561, 140, 448, 316, 897, 74, 722, 689, 817, 406, 506, 109, 329, 352, 550, 13, 536, 999, 796, 848, 155, 179, 251, 692, 698, 464, 28, 302, 530, 192, 395, 168, 295, 559, 574, 630, 900, 60, 493, 369, 32, 174, 59, 185, 697, 745, 142, 880, 27, 381, 612, 191, 741, 616, 670, 491, 244, 839, 8, 580, 356, 728, 596, 759, 256, 322, 205, 299, 860, 787, 595, 508, 245, 120, 490, 203, 239, 92, 160, 605, 437, 641, 105, 125, 427, 597, 334, 658, 66, 341, 815, 541, 786, 202, 454, 757, 224, 636, 795, 905, 39, 462, 760, 545, 98, 242, 552, 553, 684, 819, 209, 435, 701, 863, 875, 169, 690, 956, 87, 625, 859, 164, 510, 975, 666, 699, 926, 261, 516, 254, 960, 840, 211, 62, 79, 129, 487, 522, 681, 622, 291, 682, 629, 883, 941, 324, 867, 974, 474, 331, 607, 810, 137, 143, 998, 182, 976, 871, 89, 558, 770, 214, 368, 822, 604, 789, 614, 838, 389, 88, 738, 150, 515, 631, 854, 44, 827, 876, 949, 841, 376, 297, 400, 705, 133, 624, 264, 668, 746, 95, 289, 593, 685, 973, 173, 638, 739, 275, 512, 416, 440, 877, 306, 569, 747, 937, 825, 542, 944, 648, 651, 663, 843, 63, 72, 193, 902, 283, 476, 673, 207, 58, 332, 359, 526, 952, 729, 783, 443, 524, 186, 991, 594, 70, 267, 919, 41, 438, 589, 649, 110, 714, 790, 560, 124, 527, 195, 340, 100, 194, 455, 353, 138, 910, 180, 382, 252, 710, 679, 816, 342, 723, 165, 236, 323, 830, 982, 162, 606, 862, 48, 458, 465, 940, 513, 678, 761, 942, 367, 600, 646, 829, 51, 980, 812, 643, 505, 539, 849, 364, 575, 81, 793, 925, 97, 468, 586, 53, 83, 201, 215, 711, 765, 318, 463, 654, 719, 659, 64, 176, 290, 768, 397, 482, 882, 69, 227, 434, 4, 571, 874, 432, 931, 154, 402, 446, 317, 343, 993, 587, 420, 220, 419, 800, 196, 652, 911, 922, 514, 540, 549, 255, 25, 36, 365, 731, 890, 996, 865, 650, 240, 713, 660, 762, 884, 573, 577, 950, 441, 90, 405, 294, 404, 200, 535, 869, 721, 34, 304, 473, 529, 613, 933, 122, 156, 243, 866, 135, 519, 315, 344, 766, 807, 831, 834, 77, 523, 640, 47, 378, 387, 284, 121, 228, 852, 966, 40, 373, 969, 562, 18, 37, 123, 307, 551, 965, 6, 981, 798, 896, 14, 187, 388, 528, 691, 576, 774, 903, 75, 183, 837, 111, 764, 932, 82, 453, 611, 337, 520, 584, 683, 870, 470, 235, 347, 763, 909, 311, 375, 626, 967, 534, 978, 546, 826, 80, 460, 371, 959, 22, 271, 319, 130, 394, 56, 665, 99, 149, 153, 385, 592, 103, 361, 450, 566, 113, 717, 855, 225, 262, 833, 23, 794, 230, 257, 354, 750, 656, 422, 970, 272, 425, 301, 412, 384, 451, 603, 718, 709, 391, 906, 134, 366, 489, 579, 995, 538, 724, 752, 57, 345, 878, 447, 748, 2, 85, 887, 313, 372, 677, 544, 428, 433, 781, 175, 258, 782, 421, 423, 868, 617, 26, 30, 33, 835, 954, 608, 850, 38, 188, 401, 644, 456, 686, 857, 303, 424, 521, 362, 847, 873, 554, 671, 772, 818, 65, 590, 655, 836, 771, 846, 977, 141, 664, 913, 968, 197, 296, 509, 55, 282, 136, 479, 409, 856, 899, 749, 811, 229, 785, 268, 556, 675, 107, 35, 15, 379, 601, 106, 588, 108, 42, 232, 570, 116, 377, 533, 674, 935, 930, 985, 339, 582, 241, 374, 814, 285, 742, 360, 563, 43, 276, 152, 210, 481, 958, 653, 661, 733, 828, 531, 127, 578, 657, 918, 823, 915, 485, 498, 585, 945, 938, 963, 216, 226, 695, 712, 979, 20, 31, 328, 386, 445, 500, 637, 436, 278, 751, 808, 990, 112, 148, 49, 50, 248, 572, 694, 696, 213, 259, 94, 452, 864, 21, 269, 132, 222, 511, 325, 260, 355, 392, 927, 609, 403, 744, 101, 104, 349, 281, 9, 45, 824, 19, 263, 780, 358, 961, 503, 820, 964, 517, 667, 802, 994, 67, 270, 618, 16, 499, 754, 115, 158, 330, 363, 881, 3, 171, 581, 5, 627, 234, 7, 0, 346, 708, 727, 161, 466, 635, 1}
	if len(output) != n {
		fmt.Printf("output length wrong, %d\n", len(output))
		for i := 0; i < 1000; i++ {
			_, ok := Find(output, i)
			if !ok {
				group := itemGroups[i]
				fmt.Printf("%d not in output, group %d, before items %v\n", i, group, beforeItems[i])
			}
		}
	}
	groups := initSlice(m)
	for i, group := range itemGroups {
		if group != -1 {
			groups[group] = append(groups[group], i)
		}
	}
	for _, group := range groups {
		positions := []int{}
		for _, i := range group {
			key, ok := Find(output, i)
			if !ok {
				fmt.Printf("num %d didn't find in output\n", i)
			}
			positions = append(positions, key)
		}
		sort.Ints(positions)
		if len(positions) > 0 && positions[len(positions)-1]-positions[0] != len(group)-1 {
			fmt.Printf("group %v didn't keep together\n", group)
		}
	}
	for i, items := range beforeItems {
		iKey, _ := Find(output, i)
		for _, item := range items {
			jKey, _ := Find(output, item)
			if iKey < jKey {
				fmt.Printf("%d and %d position wrong\n", i, item)
			}
		}
	}
}
